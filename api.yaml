openapi: 3.0.1
info:
  title: "QROOM"
  version: "1.0.0"
  description: "Application for booking meeting rooms"
tags:
  - name: "user"
    description: "Operations about user"

  - name: "room"
    description: "Access to booking room"

paths:
  /user/register:
    post:
      tags:
        - "user"
      summary: "Register new user in system"

      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - login
                - password
                - name
              properties:
                login:
                  type: string
                name:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: "Successful user registration"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDTO"
        "400":
          description: "Invalid login or password"

  /user/login:
    post:
      tags:
        - "user"
      summary: "User authentication"

      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - login
                - password
              properties:
                login:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: "Successful authentication"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenResponseDTO"
        "400":
          description: "Invalid login or password"

  /user:
    get:
      tags:
        - "user"
      parameters:
        - name: login
          in: query
          required: false
          schema:
            type: string
      responses:
        200:
          description: "List of users"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDTO"



  /room/{room_uuid}:
    get:
      tags:
        - "room"
      description: "Get room by uuid"
      parameters:
        - name: room_uuid
          in: path
          required: true
          schema:
            type: integer
        - name: equipment
          in: query
          description: "Flag for collecting info about room equipment or not"
          schema:
            type: boolean
      responses:
        200:
          description: "Room with uuid {room_uuid}"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoomDTO"
        404:
          description: "Room not found"

  /room/history:
    get:
      tags:
        - "room"
      description: "Get user history"
      parameters:
        - name: user_login
          in: query
          schema:
            type: string
          required: true
      security:
        - bearerAuth: []
      responses:
        "200":
          description: "Booking history user with login {login}"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserHistoryDTO"
        "401":
          description: "Access denied"

  /room/booking/{room_uuid}:
    get:
      tags:
        - "room"
      parameters:
        - name: room_uuid
          in: path
          schema:
            type: integer
          required: true
      security:
        - bearerAuth: []
      responses:
        "200":
          description: "Already booked time segments"
          content:
            applicaton/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TimeSegmentDTO"
    post:
      tags:
        - "room"
      security:
        - bearerAuth: [ ]
      requestBody:
        content:
          application/json:
            schema:
              required:
                - admin
                - room_uuid
                - time
              properties:
                admin:
                  type: string
                  description: "User login"
                room_uuid:
                  type: integer
                time:
                  $ref: "#/components/schemas/TimeSegmentDTO"
                invited_users:
                  type: array
                  items:
                    type: string

      responses:
        "200":
          description: "Room successfully booked"
        # invalid time
        # invalid list of invited users
    delete:
      tags:
        - "room"
      description: "Delete room booking"
      security:
        - bearerAuth: [ ]
      parameters:
        - name: booking_uuid
          in: query
          required: true
          schema:
            type: integer
      responses:
        200:
          description: "Successfully delete booking"
        401:
          description: "Access denied"
        # invalid booking id


components:
  schemas:
    UserDTO:
      type: object
      required:
        - "name"
        - "login"
      properties:
        login:
          type: string
        name:
          type: string

    RoomDTO:
      type: object
      required:
        - uuid
        - name
      description: "Объект описывающий комнату для собраний"
      properties:
        uuid:
          type: integer
        name:
          type: string
        description:
          type: string
        photoURLs:
          type: array
          items:
            type: string
        number_of_seats:
          type: integer
        location:
          type: string
        equipment:
          $ref: "#/components/schemas/EquipmentDTO"

    TimeSegmentDTO:
      type: object
      description: "Объект описывающий один сегмент времени"
      required:
        - start
        - end
      properties:
        start:
          type: string
          description: "time iso format"
        end:
          type: string
          description: "time iso format"

    EquipmentDTO:
      type: object
      description: "Тех оборудование комнаты"
      required:
        - uuid
        - name
        - equipment_type
      properties:
        uuid:
          type: integer
        name:
          type: string
        description:
          type: string
        equipment_type:
          $ref: "#/components/schemas/EquipmentType"

    EquipmentType:
      type: object
      description: "Тип технического оборудования"
      required:
        - name
      properties:
        name:
          type: string
        description:
          type: string

    TokenResponseDTO:
      type: object
      description: "JWT токены пользователя"
      required:
        - accessToken
        - refreshToken
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string

    UserHistoryDTO:
      type: object
      description: "Объект описывающий юнит записи в истории пользовалеля"
      required:
        - room_uuid
        - time
        - isAdmin
      properties:
        room_uuid:
          type: integer
        time:
          $ref: "#/components/schemas/TimeSegmentDTO"
        isAdmin:
          type: boolean

  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT
